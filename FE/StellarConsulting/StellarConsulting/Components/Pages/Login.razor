@page "/"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


<head>
    <link href="bootstrap/bootstrap.min.css" rel="stylesheet" />
</head>

<div class="login-title">
    <img src="images/login-title.png" alt="Login" class="login-image" />
</div>

<div class="login-container">
    <form @onsubmit="HandleLogin" @onsubmit:preventDefault="true">
        <div class="form-group">
            <label for="username">Username:</label>
            <input id="username" type="text" class="form-control" name="username" @bind="username" />
        </div>
        <div class="form-group">
            <label for="password">Passwords:</label>
            <input id="password" type="password" class="form-control" name="password" @bind="password" />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </form>
</div>

<style>
    .login-container {
        max-width: 400px;
        margin: 50px auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        margin-top: 5px;
    }

    .btn-primary {
        width: 100%;
        padding: 10px;
        background-color: #007bff;
        border: none;
        color: white;
        font-size: 16px;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .login-title {
        text-align: center;
        margin-bottom: 20px;
    }

    .login-image {
        max-width: 400px; 
        width: 100%; 
        height: auto; 
        margin: 0 auto;
        display: block; 
    }


</style>

@code {
    private string username;
    private string password;


    private async Task HandleLogin()
    {
        try
        {
            var loginRequest = new { Username = username, Password = password };
            var response = await Http.PostAsJsonAsync("https://localhost:7196/api/Auth/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (result.User.RoleId == 1)
                {
                    // Authorized user, navigate to homepage
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                    NavigationManager.NavigateTo("/home");
                }
                else
                {
                    // RoleId not authorized
                    await JSRuntime.InvokeVoidAsync("alert", "Login failed: Your RoleId is not authorized to access the homepage.");
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Login failed: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }



    public class LoginResponse
    {
        public string Message { get; set; }
        public UserInfo User { get; set; }
        public string Token { get; set; }
    }

    public class UserInfo
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int RoleId { get; set; }
        public string Role { get; set; }
    }
}
